/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erpgest.panels;

import erpgest.MainFrame;
import erpgest.db.DbConn;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import erpgest.utils.ChooseData;
import erpgest.utils.Utils;
import erpgest.utils.fatturaAnaliticaPDF;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SteVid <www.stevid.it>
 */
public class JPanelOrdini extends javax.swing.JPanel implements InterfaceCallBackArticoli,InterfaceCallBackClienti,InterfaceCallBackListino{

    SimpleDateFormat formatterData = new SimpleDateFormat("dd/MM/yyyy");
    SimpleDateFormat formatterOre = new SimpleDateFormat("HH:mm");
    SimpleDateFormat formatterOreSecondi = new SimpleDateFormat("HH:mm:ss");
    SimpleDateFormat formatterDataENG = new SimpleDateFormat("yyyy-MM-dd");
    SimpleDateFormat formatterDataAndTimeENG = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");    

    MainFrame parentFrame ;
    
    String UPDATE_OK = "Aggiornamento effettuato.";
    String INSERT_OK = "Inserimento effettuato.";
    
    String listinoScelto   = "";
    String idListinoScelto = "";
    String idPrezzoScelto  = "";
    String prezzoScelto    = "";
    String colliScelti     = "1";
    
    public void setParentFrame(MainFrame parent){
        this.parentFrame = parent;
    }    
    
    /**
     * Creates new form JPanelOrdini
     */
    public JPanelOrdini() {
        initComponents();
        
        jTableClienti.setAutoResizeMode(jTableClienti.AUTO_RESIZE_OFF);
        jTableClienti.setCellSelectionEnabled(false);
        jTableClienti.setColumnSelectionAllowed(false);
        jTableClienti.setRowSelectionAllowed(true);
        jTableClienti.setSelectionMode(0);
        
        jTableArticoli.setAutoResizeMode(jTableArticoli.AUTO_RESIZE_OFF);
        jTableArticoli.setCellSelectionEnabled(false);
        jTableArticoli.setColumnSelectionAllowed(false);
        jTableArticoli.setRowSelectionAllowed(true);
        jTableArticoli.setSelectionMode(0);        
        
     

        jTableClienti.addMouseListener(new MouseAdapter() {
        public void mousePressed(MouseEvent me) {
                JTable table =(JTable) me.getSource();
                Point p = me.getPoint();
                int row = table.rowAtPoint(p);

                //popolaListaArticoli();
                aggiornaTabellaPuntiVendita(jLabelID.getText(),jTableClienti.getModel().getValueAt(jTableClienti.getSelectedRow(), 0).toString());  
                rimuoviTuttiElementiListaArticoli();
            }
        });          
      
        jTablePuntiVendita.addMouseListener(new MouseAdapter() {
        public void mousePressed(MouseEvent me) {
                JTable table =(JTable) me.getSource();
                Point p = me.getPoint();
                int row = table.rowAtPoint(p);
                popolaListaArticoli();
                
            }
        });   
        
        jTableArticoli.addMouseListener(new MouseAdapter() {
        public void mousePressed(MouseEvent me) {
                JTable table =(JTable) me.getSource();
                Point p = me.getPoint();
                int row = table.rowAtPoint(p);
                if (me.getClickCount() == 2) {
                    JDialogImpostaPrezzoPerOrdini uno = new JDialogImpostaPrezzoPerOrdini(parentFrame, getThis(), 
                            jTableArticoli.getModel().getValueAt(jTableArticoli.getSelectedRow(), 0).toString(), 
                            jTableArticoli.getModel().getValueAt(jTableArticoli.getSelectedRow(), 1).toString(),
                            jTableArticoli.getModel().getValueAt(jTableArticoli.getSelectedRow(), 2).toString());
                    aggiornaListaArticoli(jTableArticoli.getModel().getValueAt(jTableArticoli.getSelectedRow(), 0).toString());
                }
            }
        });        
        
    }
    
    private JPanelOrdini getThis(){
        return this;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableClienti = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableArticoli = new javax.swing.JTable();
        jButtonAggiungiTuttiClienti = new javax.swing.JButton();
        jButtonCancellaCliente = new javax.swing.JButton();
        jButtonAggiungliCliente = new javax.swing.JButton();
        jButtonAggiungiArticolo = new javax.swing.JButton();
        jButtonRimuoviArticolo = new javax.swing.JButton();
        jButtonModificaArticolo = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButtonScegliData = new javax.swing.JButton();
        jButtonNuovoOrdine = new javax.swing.JButton();
        jButtonNuovoOrdine1 = new javax.swing.JButton();
        jButtonCreaDDT = new javax.swing.JButton();
        jButtonSettaPesiTotali = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabelID = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTablePuntiVendita = new javax.swing.JTable();
        jButtonAggiungiPuntoVendita = new javax.swing.JButton();
        jButtonRimuoviPuntoVendita = new javax.swing.JButton();
        jButtonAggiungiTuttiPuntiVendita = new javax.swing.JButton();

        setLayout(null);

        jTableClienti.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Ragione Sociale", "Partita IVA", "Indirizzo", "Citta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableClienti);
        if (jTableClienti.getColumnModel().getColumnCount() > 0) {
            jTableClienti.getColumnModel().getColumn(0).setPreferredWidth(30);
            jTableClienti.getColumnModel().getColumn(0).setMaxWidth(30);
            jTableClienti.getColumnModel().getColumn(1).setPreferredWidth(350);
            jTableClienti.getColumnModel().getColumn(1).setMaxWidth(400);
            jTableClienti.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTableClienti.getColumnModel().getColumn(2).setMaxWidth(100);
            jTableClienti.getColumnModel().getColumn(3).setPreferredWidth(350);
            jTableClienti.getColumnModel().getColumn(3).setMaxWidth(400);
        }

        add(jScrollPane1);
        jScrollPane1.setBounds(50, 60, 920, 160);

        jTableArticoli.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Descrizione", "Listino", "Prezzo", "IVA", "Colli"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableArticoli);
        if (jTableArticoli.getColumnModel().getColumnCount() > 0) {
            jTableArticoli.getColumnModel().getColumn(0).setPreferredWidth(60);
            jTableArticoli.getColumnModel().getColumn(0).setMaxWidth(60);
            jTableArticoli.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTableArticoli.getColumnModel().getColumn(1).setMaxWidth(200);
            jTableArticoli.getColumnModel().getColumn(2).setPreferredWidth(300);
            jTableArticoli.getColumnModel().getColumn(2).setMaxWidth(350);
            jTableArticoli.getColumnModel().getColumn(3).setPreferredWidth(100);
            jTableArticoli.getColumnModel().getColumn(3).setMaxWidth(100);
            jTableArticoli.getColumnModel().getColumn(4).setPreferredWidth(100);
            jTableArticoli.getColumnModel().getColumn(4).setMaxWidth(100);
            jTableArticoli.getColumnModel().getColumn(5).setPreferredWidth(40);
            jTableArticoli.getColumnModel().getColumn(5).setMaxWidth(40);
        }

        add(jScrollPane2);
        jScrollPane2.setBounds(50, 410, 850, 250);

        jButtonAggiungiTuttiClienti.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erpgest/images/add_all.png"))); // NOI18N
        jButtonAggiungiTuttiClienti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAggiungiTuttiClientiActionPerformed(evt);
            }
        });
        add(jButtonAggiungiTuttiClienti);
        jButtonAggiungiTuttiClienti.setBounds(790, 20, 70, 32);

        jButtonCancellaCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erpgest/img/ico/cross.png"))); // NOI18N
        jButtonCancellaCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancellaClienteActionPerformed(evt);
            }
        });
        add(jButtonCancellaCliente);
        jButtonCancellaCliente.setBounds(930, 20, 40, 32);

        jButtonAggiungliCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erpgest/images/add_user.png"))); // NOI18N
        jButtonAggiungliCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAggiungliClienteActionPerformed(evt);
            }
        });
        add(jButtonAggiungliCliente);
        jButtonAggiungliCliente.setBounds(860, 20, 70, 32);

        jButtonAggiungiArticolo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erpgest/img/ico/add.png"))); // NOI18N
        jButtonAggiungiArticolo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAggiungiArticoloActionPerformed(evt);
            }
        });
        add(jButtonAggiungiArticolo);
        jButtonAggiungiArticolo.setBounds(910, 430, 40, 40);

        jButtonRimuoviArticolo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erpgest/img/ico/minus2.png"))); // NOI18N
        jButtonRimuoviArticolo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRimuoviArticoloActionPerformed(evt);
            }
        });
        add(jButtonRimuoviArticolo);
        jButtonRimuoviArticolo.setBounds(910, 470, 40, 40);

        jButtonModificaArticolo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erpgest/img/ico/pencil.png"))); // NOI18N
        jButtonModificaArticolo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModificaArticoloActionPerformed(evt);
            }
        });
        add(jButtonModificaArticolo);
        jButtonModificaArticolo.setBounds(910, 510, 40, 40);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erpgest/img/ico/images.png"))); // NOI18N
        jButton1.setToolTipText("Visualizza Resoconto totale prodotti");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(910, 550, 40, 40);

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel1.setText("Data Ordine:");

        jButtonScegliData.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jButtonScegliData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erpgest/img/ico/calendar_1.png"))); // NOI18N
        jButtonScegliData.setText("Scegli Data Ordine");
        jButtonScegliData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonScegliDataActionPerformed(evt);
            }
        });

        jButtonNuovoOrdine.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jButtonNuovoOrdine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erpgest/img/ico/note.png"))); // NOI18N
        jButtonNuovoOrdine.setText("Nuovo");
        jButtonNuovoOrdine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuovoOrdineActionPerformed(evt);
            }
        });

        jButtonNuovoOrdine1.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jButtonNuovoOrdine1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erpgest/img/ico/arrow_refresh.png"))); // NOI18N
        jButtonNuovoOrdine1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuovoOrdine1ActionPerformed(evt);
            }
        });

        jButtonCreaDDT.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jButtonCreaDDT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erpgest/img/ico/page_white_paintbrush.png"))); // NOI18N
        jButtonCreaDDT.setText("D.D.T.");
        jButtonCreaDDT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreaDDTActionPerformed(evt);
            }
        });

        jButtonSettaPesiTotali.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erpgest/img/ico/databases.png"))); // NOI18N
        jButtonSettaPesiTotali.setText("Tot.");
        jButtonSettaPesiTotali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSettaPesiTotaliActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonScegliData, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonNuovoOrdine)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCreaDDT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonNuovoOrdine1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSettaPesiTotali)
                .addContainerGap(65, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonNuovoOrdine1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonScegliData, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonNuovoOrdine, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonCreaDDT, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonSettaPesiTotali, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        add(jPanel1);
        jPanel1.setBounds(100, 10, 680, 50);

        jLabelID.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jLabelID.setForeground(new java.awt.Color(255, 0, 0));
        jLabelID.setText("-");

        jLabel2.setText("ID");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelID, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelID, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        add(jPanel2);
        jPanel2.setBounds(20, 10, 90, 40);

        jTablePuntiVendita.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Indirizzo", "Citta", "CAP", "Telefono"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTablePuntiVendita);
        if (jTablePuntiVendita.getColumnModel().getColumnCount() > 0) {
            jTablePuntiVendita.getColumnModel().getColumn(0).setPreferredWidth(40);
            jTablePuntiVendita.getColumnModel().getColumn(1).setPreferredWidth(250);
            jTablePuntiVendita.getColumnModel().getColumn(2).setPreferredWidth(300);
            jTablePuntiVendita.getColumnModel().getColumn(3).setPreferredWidth(100);
            jTablePuntiVendita.getColumnModel().getColumn(4).setPreferredWidth(60);
            jTablePuntiVendita.getColumnModel().getColumn(5).setPreferredWidth(80);
        }

        add(jScrollPane3);
        jScrollPane3.setBounds(50, 230, 850, 170);

        jButtonAggiungiPuntoVendita.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erpgest/images/add_one_site.png"))); // NOI18N
        jButtonAggiungiPuntoVendita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAggiungiPuntoVenditaActionPerformed(evt);
            }
        });
        add(jButtonAggiungiPuntoVendita);
        jButtonAggiungiPuntoVendita.setBounds(910, 250, 60, 40);

        jButtonRimuoviPuntoVendita.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erpgest/img/ico/minus2.png"))); // NOI18N
        jButtonRimuoviPuntoVendita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRimuoviPuntoVenditaActionPerformed(evt);
            }
        });
        add(jButtonRimuoviPuntoVendita);
        jButtonRimuoviPuntoVendita.setBounds(910, 330, 60, 40);

        jButtonAggiungiTuttiPuntiVendita.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erpgest/images/add_all_site.png"))); // NOI18N
        jButtonAggiungiTuttiPuntiVendita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAggiungiTuttiPuntiVenditaActionPerformed(evt);
            }
        });
        add(jButtonAggiungiTuttiPuntiVendita);
        jButtonAggiungiTuttiPuntiVendita.setBounds(910, 290, 60, 40);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonScegliDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonScegliDataActionPerformed
        GregorianCalendar date = new GregorianCalendar();
        Date dal;
        Date data;
        Date oggi = (Calendar.getInstance()).getTime();
        String strOggi = formatterData.format(oggi);          
        ChooseData dc = new ChooseData(parentFrame, date);
        String choosed = dc.getDate();
        if( choosed.equals("") || choosed == null){
            choosed = "Scegli data";
        }else{
            Thread t = new Thread(new erpgest.utils.ShowWaiting(parentFrame.getFrame(), null, "Salvataggio in corso. Attendere"));
            t.start();

            while (parentFrame.waiting == null) {
                try {
                    Thread.sleep(100);
                } catch (Exception e) {
                }
            }

            Thread tt = new Thread(new PopolaListe());
            tt.start();
        
        }
        try {
            data = formatterData.parse(choosed);
            jButtonScegliData.setText(choosed);
            
        } catch (Exception e) {
        }
        
        
        
    }//GEN-LAST:event_jButtonScegliDataActionPerformed

    private void jButtonRimuoviArticoloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRimuoviArticoloActionPerformed
        String idCliente  = "";
        String idArticolo = "";
        try {
            idCliente = jTableClienti.getModel().getValueAt(jTableClienti.getSelectedRow(), 0).toString();            
        } catch (Exception e) {
        }

        try {
            idArticolo = jTableArticoli.getModel().getValueAt(jTableArticoli.getSelectedRow(), 0).toString();            
        } catch (Exception e) {
        }        
        
        if (jLabelID.getText().equals("-") || idCliente.equals("")  || idArticolo.equals("")) {
            JOptionPane.showMessageDialog(parentFrame.getFrame(), "Scegliere una data e un cliente valido e un prodotto valido", "Attenzione", JOptionPane.ERROR_MESSAGE);
            return;            
        }
        
        rimuoviArticoloSelezionato(jTableArticoli.getModel().getValueAt(jTableArticoli.getSelectedRow(), 0).toString());
        
        
    }//GEN-LAST:event_jButtonRimuoviArticoloActionPerformed

    private void jButtonNuovoOrdineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuovoOrdineActionPerformed
        //controllo ci sia una data indicata
        if( jButtonScegliData.getText().startsWith("Scegli") ){
            JOptionPane.showMessageDialog(parentFrame.getFrame(), "Scegliere una data.", "Attenzione", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if( !jLabelID.getText().equals("-")){
            JOptionPane.showMessageDialog(parentFrame.getFrame(), "Ordine Gia creato per la data indicata.", "Attenzione", JOptionPane.ERROR_MESSAGE);
            return;
        }        
        
        String query = "";
        String result = "";
        Date data;
        ResultSet res ;
        int id;
        
        DbConn conn = new DbConn();
        conn.makeConn();
        
        try {
                    //creo un nuovo ordine
                    data = formatterData.parse(jButtonScegliData.getText());
                    String dataStr = formatterDataAndTimeENG.format(data);
                    query = "INSERT INTO ORDINI "
                              + "(TOTALE_COLLI,DATA_ORDINE) VALUES (0,'"+dataStr+"');";
                    result = conn.insert(query);
                    if (result.equals(INSERT_OK)) {
                        //recupero id
                        query = "select seq from sqlite_sequence where name='ORDINI'";
                        res = conn.selectSMS(query);
                        id = res.getInt(1);
                        jLabelID.setText(""+id);
                        
                        jTableClienti.setVisible(false);
                        DefaultTableModel defaultModel = (DefaultTableModel) jTableClienti.getModel();

                        while (defaultModel.getRowCount() > 0) {
                            defaultModel.removeRow(0);
                        }      
                        jTableClienti.invalidate();
                        jTableClienti.validate();
                        jTableClienti.repaint();    
                        jTableClienti.setVisible(true);

                        jTableArticoli.setVisible(false);
                        defaultModel = (DefaultTableModel) jTableArticoli.getModel();

                        while (defaultModel.getRowCount() > 0) {
                            defaultModel.removeRow(0);
                        }      
                        jTableArticoli.invalidate();
                        jTableArticoli.validate();
                        jTableArticoli.repaint();    
                        jTableArticoli.setVisible(true);                        

                    }            
        } catch (Exception e) {
            Utils.logError(e, "", true);
        }
        
        conn.close();
        
    }//GEN-LAST:event_jButtonNuovoOrdineActionPerformed

    private void jButtonAggiungiTuttiClientiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAggiungiTuttiClientiActionPerformed
        if (jLabelID.getText().equals("-")) {
            JOptionPane.showMessageDialog(parentFrame.getFrame(), "Scegliere una data e creare un ordine.", "Attenzione", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int n = JOptionPane.showConfirmDialog(null,
            "Vuoi aggiungere tutti i restanti clienti?",
            "",
            JOptionPane.YES_NO_OPTION);

        if (n == JOptionPane.YES_OPTION) {

                Thread t = new Thread(new erpgest.utils.ShowWaiting(parentFrame.getFrame(), null, "Salvataggio in corso. Attendere"));
                t.start();

                while (parentFrame.waiting == null) {
                    try {
                        Thread.sleep(100);
                    } catch (Exception e) {
                    }
                }

                Thread tt = new Thread(new AggiungiTuttiIClientiAllaLista());
                tt.start();                   
            
        } else {
            //JOptionPane.showMessageDialog(null, "Goodbye");
            return;
        }             
        
 
        
        
    }//GEN-LAST:event_jButtonAggiungiTuttiClientiActionPerformed

    private void jButtonAggiungliClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAggiungliClienteActionPerformed
        if (jLabelID.getText().equals("-")) {
            JOptionPane.showMessageDialog(parentFrame.getFrame(), "Scegliere una data e creare un ordine.", "Attenzione", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        JPanelRicercaClienti dialog = new JPanelRicercaClienti(this.parentFrame,this);
    }//GEN-LAST:event_jButtonAggiungliClienteActionPerformed

    private void jButtonCancellaClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancellaClienteActionPerformed
        try {

            int[] selection = jTableClienti.getSelectedRows();
            String id = jTableClienti.getModel().getValueAt(jTableClienti.getSelectedRow(), 0).toString() ;            
            
        } catch (Exception e) {
            new javax.swing.JOptionPane().showMessageDialog(
                    parentFrame,
                    "Selezionare Un Elemento",
                    "Attenzione",
                    javax.swing.JOptionPane.WARNING_MESSAGE
            );
            return;            
        }
        
        int n = JOptionPane.showConfirmDialog(null,
            "ATTENZIONE!! Si vuole cancellare il cliente "+ jTableClienti.getModel().getValueAt(jTableClienti.getSelectedRow(), 1).toString()+"?",
            "",
            JOptionPane.YES_NO_OPTION);

        if (n == JOptionPane.YES_OPTION) {
            rimuoviClienteDaOrdine(jTableClienti.getModel().getValueAt(jTableClienti.getSelectedRow(), 0).toString());
        } else {
            //JOptionPane.showMessageDialog(null, "Goodbye");
            return;
        }        
    }//GEN-LAST:event_jButtonCancellaClienteActionPerformed

    private void jButtonAggiungiArticoloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAggiungiArticoloActionPerformed
        String idCliente = "";
        try {
            idCliente = jTableClienti.getModel().getValueAt(jTableClienti.getSelectedRow(), 0).toString();            
        } catch (Exception e) {
        }
        
        if (jLabelID.getText().equals("-") || idCliente.equals("")) {
            JOptionPane.showMessageDialog(parentFrame.getFrame(), "Scegliere una data e un cliente valido.", "Attenzione", JOptionPane.ERROR_MESSAGE);
            return;            
        }
        
        JPanelRicercaProdottiPerOrdini dialog = new JPanelRicercaProdottiPerOrdini(this.parentFrame,this);
        
    }//GEN-LAST:event_jButtonAggiungiArticoloActionPerformed

    private void jButtonNuovoOrdine1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuovoOrdine1ActionPerformed
        popolaListaClienti();
    }//GEN-LAST:event_jButtonNuovoOrdine1ActionPerformed

    private void jButtonModificaArticoloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModificaArticoloActionPerformed

        try {

            JDialogImpostaPrezzoPerOrdini uno = new JDialogImpostaPrezzoPerOrdini(parentFrame, getThis(), 
                                jTableArticoli.getModel().getValueAt(jTableArticoli.getSelectedRow(), 0).toString(), 
                                jTableArticoli.getModel().getValueAt(jTableArticoli.getSelectedRow(), 1).toString(),
                                jTableArticoli.getModel().getValueAt(jTableArticoli.getSelectedRow(), 2).toString());
            aggiornaListaArticoli(jTableArticoli.getModel().getValueAt(jTableArticoli.getSelectedRow(), 0).toString());            
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(parentFrame.getFrame(), "Nessun articolo selezionato", "Attenzione", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_jButtonModificaArticoloActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JDialogEsploraDoc uno = new JDialogEsploraDoc(parentFrame,true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonCreaDDTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreaDDTActionPerformed
        //controllo ci sia un ordine attivo
        if (jLabelID.getText().equals("-") || jLabelID.getText().equals("") ) {
            JOptionPane.showMessageDialog(parentFrame.getFrame(), "Scegliere un ordine", "Attenzione", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //controllo non ci siano altri documenti gia fatti per quest'ordine
        
        
        //controllo ci siano prodotti nell'ordine
        
        //compilo il ddt in pdf per ciascuna destinazione
        fatturaAnaliticaPDF fap = new fatturaAnaliticaPDF();
        fap.stampa_pagina(0);        
        
    }//GEN-LAST:event_jButtonCreaDDTActionPerformed

    private void jButtonAggiungiPuntoVenditaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAggiungiPuntoVenditaActionPerformed
       
        String idAnagraficaPadre = "";
        
        try {
            idAnagraficaPadre = jTableClienti.getModel().getValueAt(jTableClienti.getSelectedRow(), 0).toString();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this.parentFrame, "Selezionare un cliente.", "ATTENZIONE!", JOptionPane.ERROR_MESSAGE);
            return;            
        }
        
        
        
    }//GEN-LAST:event_jButtonAggiungiPuntoVenditaActionPerformed

    private void jButtonRimuoviPuntoVenditaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRimuoviPuntoVenditaActionPerformed
        String idAnagraficaPadre = "";
        String idOrdine = jLabelID.getText();
        String idPuntoVendita = "";
        
        if (idOrdine.equals("") || idOrdine.equals("-")) {
            JOptionPane.showMessageDialog(this.parentFrame, "Nessun ordine Selezionato.", "ATTENZIONE!", JOptionPane.ERROR_MESSAGE);
            return;            
        }
        
        try {
            idAnagraficaPadre = jTableClienti.getModel().getValueAt(jTableClienti.getSelectedRow(), 0).toString();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this.parentFrame, "Selezionare un cliente.", "ATTENZIONE!", JOptionPane.ERROR_MESSAGE);
            return;            
        }

        try {
            idPuntoVendita = jTablePuntiVendita.getModel().getValueAt(jTablePuntiVendita.getSelectedRow(), 0).toString();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this.parentFrame, "Nessun Punto vendita selezionato.", "ATTENZIONE!", JOptionPane.ERROR_MESSAGE);
            return;            
        }        
        
        DbConn conn = new DbConn();
        conn.makeConn();
        
        String query = "";
        ResultSet res = null;
        String risultato = "";
        try {
            query = "UPDATE DETTAGLIO_ORDINI_PUNTI_VENDITA"
                    + " SET ATTIVO = 'N' "
                    + " WHERE ID_ORDINE = '"+idOrdine+"'"
                    + " AND ID_ANAGRAFICA_PADRE = '"+idAnagraficaPadre+"'"
                    + " AND ATTIVO = 'S'";
            risultato = conn.update(query);
            if (!risultato.equals(UPDATE_OK)) {
                JOptionPane.showMessageDialog(this.parentFrame, "Errore durante eliminazione punto vendita.", "ATTENZIONE!", JOptionPane.ERROR_MESSAGE);
                return;                 
            }
            
            query = " UPDATE DETTAGLIO_ORDINI"
                    + " SET ATTIVO = 'N'"
                    + " WHERE ID_ORDINE = '"+idOrdine+"'"
                    + " AND ID_DESTINAZIONE_CLIENTE = '"+idAnagraficaPadre+"'"
                    + " AND ID_PUNTO_VENDITA = '"+jTablePuntiVendita.getModel().getValueAt(jTablePuntiVendita.getSelectedRow(), 0).toString()+"'"
                    + " AND ATTIVO = 'S'";
            risultato = conn.update(query);
            if (!risultato.equals(UPDATE_OK)) {
                JOptionPane.showMessageDialog(this.parentFrame, "Errore durante eliminazione articoli \n"
                        + " durante eliminazione punto vendita.", "ATTENZIONE!", JOptionPane.ERROR_MESSAGE);
                return;                  
            }            
        } catch (Exception e) {
            Utils.logError(e, "", true);
        }
        conn.close();
        
        aggiornaTabellaPuntiVendita(idOrdine,idAnagraficaPadre);
    }//GEN-LAST:event_jButtonRimuoviPuntoVenditaActionPerformed

    private void jButtonAggiungiTuttiPuntiVenditaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAggiungiTuttiPuntiVenditaActionPerformed
        String idAnagraficaPadre = "";
        String idOrdine = jLabelID.getText();
        
        if (idOrdine.equals("") || idOrdine.equals("-")) {
            JOptionPane.showMessageDialog(this.parentFrame, "Nessun ordine Selezionato.", "ATTENZIONE!", JOptionPane.ERROR_MESSAGE);
            return;            
        }
        
        try {
            idAnagraficaPadre = jTableClienti.getModel().getValueAt(jTableClienti.getSelectedRow(), 0).toString();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this.parentFrame, "Selezionare un cliente.", "ATTENZIONE!", JOptionPane.ERROR_MESSAGE);
            return;            
        }
        
        int n = JOptionPane.showConfirmDialog(null,
            "Vuoi aggiungere tutti i restanti clienti?",
            "\n Tutti i precedenti puntivendita realtivi a l'ordine : " + idOrdine
                    + "\n e al cliente :" + jTableClienti.getModel().getValueAt(jTableClienti.getSelectedRow(), 1).toString()
                    + " verranno cancellati",
            JOptionPane.YES_NO_OPTION);        
        
        DbConn conn = new DbConn();
        conn.makeConn();
        
        String query   = "";
        ResultSet res  = null;   
        String risultato = "";
        try {
            
            query = "UPDATE DETTAGLIO_ORDINI_PUNTI_VENDITA "
                    + " SET ATTIVO = 'N'"
                    + " WHERE ID_ORDINE = '"+idOrdine+"'"
                    + " AND ATTIVO = 'S'";
            risultato = conn.update(query);
            if (!risultato.equals(UPDATE_OK)) {
                JOptionPane.showMessageDialog(this.parentFrame, "Errore durante cancellazione punti vendita.", "ATTENZIONE!", JOptionPane.ERROR_MESSAGE);
                return;
            }            
            query = "SELECT * FROM PUNTI_VENDITA "
                    + " WHERE ID_ANAGRAFICA_PADRE = '"+idAnagraficaPadre+"'"
                    + " AND ATTIVO = 'S'";
            res = conn.selectSMS(query);
            while( res.next() ){
                query = " INSERT INTO DETTAGLIO_ORDINI_PUNTI_VENDITA "
                        + " ("
                        + " ID_ORDINE,"
                        + " ID_ANAGRAFICA_PADRE,"
                        + " ID_PUNTO_VENDITA"
                        + ") VALUES ("
                        + " '"+idOrdine+"',"
                        + " '"+idAnagraficaPadre+"',"
                        + " '"+res.getString("ID")+"'"
                        + ")";
                risultato = conn.insert(query);
                if (!risultato.equals(INSERT_OK)) {
                    throw new Exception("errore inserimento query = " + query);
                }
            }
            
        } catch (Exception e) {
            Utils.logError(e, "", true);
        }
        conn.close();
        aggiornaTabellaPuntiVendita(idOrdine, idAnagraficaPadre);
    }//GEN-LAST:event_jButtonAggiungiTuttiPuntiVenditaActionPerformed

    private void jButtonSettaPesiTotaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSettaPesiTotaliActionPerformed
        if (jLabelID.getText().equals("") 
                || jLabelID.getText().equals("-") ) {
            JOptionPane.showMessageDialog(this.parentFrame, "Nessun Ordine Selezionato.", "ATTENZIONE!", JOptionPane.ERROR_MESSAGE);
            return;            
        }
        
        JDialogResocontoOrdine resTot = new JDialogResocontoOrdine(parentFrame,jLabelID.getText(),true);
        
        String query = "select d.id_articolo\n" +
"from dettaglio_ordini d\n" +
"where d.id_ordine = 23\n" +
"group by d.id_articolo";
        
    }//GEN-LAST:event_jButtonSettaPesiTotaliActionPerformed

    public void aggiornaTabellaPuntiVendita(String idOrdine, String idAnagraficaPadre){
        DbConn conn = new DbConn();
        conn.makeConn();
        
        String query = "";
        ResultSet res = null;
        String risultato = "";
        try {
            query = "SELECT P.* FROM "
                    + " DETTAGLIO_ORDINI_PUNTI_VENDITA O,"
                    + " PUNTI_VENDITA P"
                    + " WHERE "
                    + " O.ID_ANAGRAFICA_PADRE = '"+idAnagraficaPadre+"' "
                    + " AND O.ID_ORDINE = '"+idOrdine+"'"
                    + " AND O.ATTIVO = 'S' "
                    + " AND P.ID = O.ID_PUNTO_VENDITA"
                    + " AND P.ATTIVO = 'S' "
                    + " ORDER BY DATA_MODIFICA DESC";            
            res   = conn.selectSMS(query);
            DefaultTableModel defaultModel = (DefaultTableModel) jTablePuntiVendita.getModel();

            while (defaultModel.getRowCount() > 0) {
                defaultModel.removeRow(0);
            }            
            while (res.next()) {
                Object[] cell = {res.getString("ID"),
                    res.getString("NOME") ,
                    res.getString("INDIRIZZO"),
                    res.getString("CITTA"),
                    res.getString("CAP"),
                    res.getString("TELEFONO")
                };
                defaultModel.addRow(cell);
            }
            jTablePuntiVendita.invalidate();
            jTablePuntiVendita.validate();
            jTablePuntiVendita.repaint();              
            
        } catch (Exception e) {
            Utils.logError(e, "", true);
        }
        conn.close();
        //rimuoviTuttiElementiListaPuntiVendita();
    }    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonAggiungiArticolo;
    private javax.swing.JButton jButtonAggiungiPuntoVendita;
    private javax.swing.JButton jButtonAggiungiTuttiClienti;
    private javax.swing.JButton jButtonAggiungiTuttiPuntiVendita;
    private javax.swing.JButton jButtonAggiungliCliente;
    private javax.swing.JButton jButtonCancellaCliente;
    private javax.swing.JButton jButtonCreaDDT;
    private javax.swing.JButton jButtonModificaArticolo;
    private javax.swing.JButton jButtonNuovoOrdine;
    private javax.swing.JButton jButtonNuovoOrdine1;
    private javax.swing.JButton jButtonRimuoviArticolo;
    private javax.swing.JButton jButtonRimuoviPuntoVendita;
    private javax.swing.JButton jButtonScegliData;
    private javax.swing.JButton jButtonSettaPesiTotali;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelID;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableArticoli;
    private javax.swing.JTable jTableClienti;
    private javax.swing.JTable jTablePuntiVendita;
    // End of variables declaration//GEN-END:variables

    @Override
    public void aggiornaListaArticoli(String id) {
        if (id.equals("") || idListinoScelto.equals("") || idPrezzoScelto.equals("") ) {
            return;
        }
        
        DbConn conn = new DbConn();
        conn.makeConn();
        
        ResultSet res = null;
        int count = 0;
        String result = "";
        try {
            
            //prima cerco se l'id c'è gia ed è attivo 
            
            String query = "SELECT count(*) FROM DETTAGLIO_ORDINI "
                    + " WHERE ID_DESTINAZIONE_CLIENTE = '"+ jTableClienti.getModel().getValueAt(jTableClienti.getSelectedRow(), 0).toString() +"' "
                    + " AND ID_ARTICOLO = " + id
                    + " AND ATTIVO = 'S'"
                    + " AND ID_ORDINE = '"+jLabelID.getText()+"'";
            res = conn.selectSMS(query);
            if (res.next()) {
                count = res.getInt(1);
            }
            if (count<=0) {
                //faccio l'insert
                query = "INSERT INTO "
                        + " DETTAGLIO_ORDINI "
                        + "(ID_ORDINE,"
                        + "ID_ARTICOLO,"
                        + "ID_DESTINAZIONE_CLIENTE,"
                        + "ID_PUNTO_VENDITA,"
                        + "QUANTITA,"
                        + "ID_LISTINO,"
                        + "PREZZO,COLLI)"
                        + " VALUES ('"+jLabelID.getText()+"',"
                        + ""+id+","
                        + "" + jTableClienti.getModel().getValueAt(jTableClienti.getSelectedRow(), 0).toString() +","
                        + "'" + jTablePuntiVendita.getModel().getValueAt(jTablePuntiVendita.getSelectedRow(), 0).toString() +"',"
                        + "0,"
                        + ""+idListinoScelto+","
                        + ""+prezzoScelto+","
                        + ""+colliScelti+")";
                result = conn.insert(query);
                if (result.equals(INSERT_OK)) {
                    popolaListaArticoli();
                }else{
                    JOptionPane.showMessageDialog(parentFrame.getFrame(), "Errore", "Attenzione", JOptionPane.ERROR_MESSAGE);                
                }
                
            }else{
                query = "UPDATE DETTAGLIO_ORDINI "
                        + " SET "
                        + " COLLI = " + colliScelti+","
                        //+ " ID_PREZZO = " + idPrezzoScelto +","
                        + " PREZZO = " + prezzoScelto+","
                        + " ID_LISTINO = " + idListinoScelto 
                        + " WHERE ID_DESTINAZIONE_CLIENTE = " + jTableClienti.getModel().getValueAt(jTableClienti.getSelectedRow(), 0).toString() 
                        + " AND ID_PUNTO_VENDITA = '"+jTablePuntiVendita.getModel().getValueAt(jTablePuntiVendita.getSelectedRow(), 0).toString()+"'"
                        + " AND ID_ARTICOLO = " + id
                        + " AND ID_ORDINE = " + jLabelID.getText()
                        + " AND ATTIVO = 'S'";
                
                result = conn.update(query);
                if (result.equals(UPDATE_OK)) {
                    popolaListaArticoli();
                }                
            }
        } catch (Exception e) {
            Utils.logError(e, "", true);
        }
        conn.close();        
    }
    
    
    
    @Override
    public void aggiornaListaClienti(String id) {
        if (id.equals("")) {
            return;
        }
        
        DbConn conn = new DbConn();
        conn.makeConn();
        
        ResultSet res = null;
        int count = 0;
        String result = "";
        try {
            
            //prima cerco se l'id c'è gia ed è attivo 
            
            String query = "SELECT count(*) FROM DETTAGLIO_ORDINI_CLIENTI "
                    + " WHERE ID_ANAGRAFICA = '"+id+"' "
                    + " AND ATTIVO = 'S'"
                    + " AND ID_ORDINE = '"+jLabelID.getText()+"'";
            res = conn.selectSMS(query);
            if (res.next()) {
                count = res.getInt(1);
            }
            if (count<=0) {
                
                query = "INSERT INTO DETTAGLIO_ORDINI_CLIENTI (ID_ORDINE,ID_ANAGRAFICA) "
                        + " VALUES ('"+jLabelID.getText()+"',"+id+")";
                result = conn.insert(query);
                if (result.equals(INSERT_OK)) {
                    popolaListaClienti();
                }
                
            }
        } catch (Exception e) {
            Utils.logError(e, "", true);
        }
        conn.close();
    }

    private void popolaListaClienti(){
        
        if (jLabelID.getText().equals("")) {
            return;
        }
        
        DbConn conn = new DbConn();
        conn.makeConn();
        try {
            String query = "";
            ResultSet res2;
            query = "select A.ID,"
                    + "A.RAGIONE_SOCIALE,"
                    + "A.PARTITA_IVA,"
                    + "A.INDIRIZZO_AZIENDA,"
                    + "A.CITTA_AZIENDA"
                    + " from DETTAGLIO_ORDINI_CLIENTI OC,"
                    + " ANAGRAFICA A"
                    + " WHERE "
                    + " OC.ID_ORDINE = '"+jLabelID.getText()+"' "
                    + " AND OC.ATTIVO = 'S'"
                    + " AND OC.ID_ANAGRAFICA = A.ID";
            res2 = conn.selectSMS(query);
            jTableClienti.setVisible(false);
            DefaultTableModel defaultModel = (DefaultTableModel) jTableClienti.getModel();

            while (defaultModel.getRowCount() > 0) {
                defaultModel.removeRow(0);
            }      

            while (res2.next()) {
                Object[] cell = {res2.getString("ID"),
                    res2.getString("RAGIONE_SOCIALE"),
                    res2.getString("PARTITA_IVA"),
                    res2.getString("INDIRIZZO_AZIENDA"),
                    res2.getString("CITTA_AZIENDA")
                };
                defaultModel.addRow(cell);
            }                        

            jTableClienti.invalidate();
            jTableClienti.validate();
            jTableClienti.repaint();    
            jTableClienti.setVisible(true);                
        } catch (Exception e) {
            Utils.logError(e, "", true);
        }        

    }

    private void popolaListaArticoli() {
        DbConn conn = new DbConn();
        conn.makeConn();
        
        try {
            String query = "SELECT DO.ID_ARTICOLO,"
                    + " A.NOME,"
                    + " A.DESCRIZIONE,"
                    + " L.NOME AS LISTINO,"
                    + " DO.PREZZO,"
                    + " DO.COLLI,"
                    + " P.IVA"
                    + " FROM DETTAGLIO_ORDINI DO,"
                    + "      DETTAGLIO_ORDINI_PUNTI_VENDITA DOPV,"
                    + "      ARTICOLI A,"
                    + "      LISTINI L,"
                    + "      PREZZI P"
                    + " WHERE DO.ID_ORDINE = " + jLabelID.getText()
                    + " AND DO.ID_DESTINAZIONE_CLIENTE = " + jTableClienti.getModel().getValueAt(jTableClienti.getSelectedRow(), 0).toString()
                    + " AND DO.ATTIVO = 'S'"
                    + " AND DO.ID_ARTICOLO = A.ID"
                    + " AND A.ATTIVO = 'S' "
                    + " AND DO.ID_LISTINO = L.ID"
                    + " AND P.ID_LISTINO = DO.ID_LISTINO"
                    + " AND P.ID_ARTICOLO = DO.ID_ARTICOLO"
                    + " AND DO.ID_ORDINE = DOPV.ID_ORDINE"
                    + " AND DO.ID_PUNTO_VENDITA = '"+jTablePuntiVendita.getModel().getValueAt(jTablePuntiVendita.getSelectedRow(), 0).toString()+"'"
                    + " AND DOPV.ATTIVO = 'S'"
                    + " AND P.ATTIVO = 'S'"
                    + " AND L.ATTIVO = 'S'";
            ResultSet res = conn.selectSMS(query);

            jTableArticoli.setVisible(false);
            DefaultTableModel defaultModel = (DefaultTableModel) jTableArticoli.getModel();

            while (defaultModel.getRowCount() > 0) {
                defaultModel.removeRow(0);
            }                  
            
            while( res.next() ){
                Object[] cell = {res.getString("ID_ARTICOLO"),
                    res.getString("NOME"),
                    res.getString("DESCRIZIONE"),
                    res.getString("LISTINO"),
                    res.getString("PREZZO"),
                    res.getString("IVA"),
                    res.getString("COLLI"),
                };
                defaultModel.addRow(cell);                
            }
            jTableArticoli.invalidate();
            jTableArticoli.validate();
            jTableArticoli.repaint();    
            jTableArticoli.setVisible(true);               
        } catch (Exception e) {
            Utils.logError(e, "", true);
        }
        
        conn.close();
    }

    @Override
    public void aggiornaListaArticoli(String id, String Listino, String prezzo, String colli) {
        //
    }

    private void rimuoviArticoloSelezionato(String idArticolo) {
        if (idArticolo.equals("")) {
            return;
        }
        
        DbConn conn = new DbConn();
        conn.makeConn();
        
        try {
            String result = "";
            String query = "";
            
            query = "UPDATE DETTAGLIO_ORDINI "
                    + " SET ATTIVO = 'N' "
                    + " WHERE ID_ORDINE = " + jLabelID.getText()
                    + " AND ATTIVO = 'S'"
                    + " AND ID_DESTINAZIONE_CLIENTE = " + jTableClienti.getModel().getValueAt(jTableClienti.getSelectedRow(), 0).toString()
                    + " AND ID_ARTICOLO = " + idArticolo;
            result = conn.update(query);
            if (!result.equals(UPDATE_OK)) {
                JOptionPane.showMessageDialog(parentFrame.getFrame(), "Errore nella rimozione dell articolo", "Attenzione", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            Utils.logError(e, "", true);
        }
        
        conn.close();
        popolaListaArticoli();
    }

    @Override
    public void settaListino(String idListino, String idPrezzo,String prezzo,String listino) {
        listinoScelto = listino;
        idPrezzoScelto  = idPrezzo;
        idListinoScelto = idListino;
        prezzoScelto = prezzo;
    }

    @Override
    public void settaListino(String idListino, String idPrezzo) {
        idPrezzoScelto  = idPrezzo;
        idListinoScelto = idListino;
    }        

    @Override
    public void settaListino(String idListino, String idPrezzo, String prezzo, String listino, String colli) {
        listinoScelto = listino;
        idPrezzoScelto  = idPrezzo;
        idListinoScelto = idListino;
        prezzoScelto = prezzo;
        colliScelti  = colli;
    }


    private class AggiungiTuttiIClientiAllaLista implements Runnable {

        public AggiungiTuttiIClientiAllaLista() {
        }

        @Override
        public void run() {
            String result = "";
            String query = "";
            int count = 0;
            DbConn conn = new DbConn();
            conn.makeConn();

            try {  
                
                query = "SELECT COUNT(*) "
                        + " FROM DETTAGLIO_ORDINI_CLIENTI "
                        + " WHERE ID_ORDINE = "+ jLabelID.getText()
                        + " AND ATTIVO = 'S'";
                ResultSet res = conn.selectSMS(query);
                if (res.next()) {
                    count = res.getInt(1);
                }
                
                if (count>0) {
                    query = "UPDATE DETTAGLIO_ORDINI_CLIENTI"
                            + " SET ATTIVO = 'N' "
                            + " WHERE ID_ORDINE = " + jLabelID.getText()
                            + " AND ATTIVO = 'S'";
                    result = conn.update(query);
                    if (!result.equals(UPDATE_OK)) {
                        JOptionPane.showMessageDialog(parentFrame.getFrame(), "impossibile cancellare i clienti gia inseriti.", "Attenzione", JOptionPane.ERROR_MESSAGE);
                        closeDialog();
                        return;

                    }
                }
                query = "INSERT INTO DETTAGLIO_ORDINI_CLIENTI(ID_ANAGRAFICA,id_ordine) "
                        + "select id,'"+jLabelID.getText()+"' "
                        + "from anagrafica a "
                        + "where a.attivo = 'S'";
                result = conn.insert(query);
                if (!result.equals(INSERT_OK)) {
                    JOptionPane.showMessageDialog(parentFrame.getFrame(), "Errore su inserimento massivo.", "Attenzione", JOptionPane.ERROR_MESSAGE);
                    closeDialog();
                    return;
                }
            } catch (Exception e) {
                Utils.logError(e, "", true);
            }
            conn.close();          
            popolaListaClienti();
            closeDialog();
        }                          
    }
        private void closeDialog() {
        if (parentFrame.waiting != null) {
            parentFrame.waiting.dispose();
            parentFrame.waiting = null;
            validate();
            repaint();
        }

    }
    private class RimuoviCliente implements Runnable {
        
        String idCliente;
        
        public RimuoviCliente(String idCliente) {
            this.idCliente = idCliente;
        }
        
        @Override
        public void run() {
            System.out.println("Sto rimuovendo il cliente");
            String result = "";
            String query = "";
            DbConn conn = new DbConn();
            conn.makeConn();

            try {
                query = "UPDATE DETTAGLIO_ORDINI_CLIENTI "
                        + " SET ATTIVO = 'N'"
                        + " WHERE ID_ANAGRAFICA = "+idCliente
                        + " AND ID_ORDINE = "+jLabelID.getText();

                result = conn.update(query);
                if (!result.equals(UPDATE_OK)) {
                    JOptionPane.showMessageDialog(parentFrame.getFrame(), "Errore.", "Attenzione", JOptionPane.ERROR_MESSAGE);
                }

                query = "UPDATE DETTAGLIO_ORDINI "
                        + " SET ATTIVO = 'N'"
                        + " WHERE ID_DESTINAZIONE_CLIENTE = "+idCliente
                        + " AND ID_ORDINE = "+jLabelID.getText();

                result = conn.update(query);
                if (!result.equals(UPDATE_OK)) {
                    JOptionPane.showMessageDialog(parentFrame.getFrame(), "Errore.", "Attenzione", JOptionPane.ERROR_MESSAGE);
                }                
                
                
            } catch (Exception e) {
                Utils.logError(e, "", true);
            }
            conn.close();
            popolaListaClienti(); 
            rimuoviTuttiElementiListaArticoli();
        }
    }
    
    private class PopolaListe implements Runnable {

        public PopolaListe() {
        }

        @Override
        public void run() {
            //prima controllo che non ci sia un ordine attivo nella data indicata
            DbConn conn = new DbConn();
            conn.makeConn();
            ResultSet res2 = null;
            Date data;
            try {
                int count = 0;
                int id = 0;
                String result = "";
                String query = "SELECT count(*) FROM ORDINI "
                        + " WHERE "
                        + " ATTIVO = 'S' "
                        + " AND strftime('%d/%m/%Y',data_ORDINE) = '"+jButtonScegliData.getText()+"'";
                ResultSet res = conn.selectSMS(query);
                if(res.next()){
                    count = res.getInt(1);
                }
                if (count>0) {
                    query = "SELECT id FROM ORDINI "
                        + " WHERE "
                        + " ATTIVO = 'S' "
                        + " AND strftime('%d/%m/%Y',data_ordine) = '"+jButtonScegliData.getText()+"'";
                    res = conn.selectSMS(query);
                    if(res.next()){
                        id = res.getInt("ID");
                    }
                    jLabelID.setText(""+id);
                    if (id>0) {
                        query = "select A.ID,"
                                + "A.RAGIONE_SOCIALE,"
                                + "A.PARTITA_IVA,"
                                + "A.INDIRIZZO_AZIENDA,"
                                + "A.CITTA_AZIENDA"
                                + " from DETTAGLIO_ORDINI_CLIENTI OC,"
                                + " ANAGRAFICA A "
                                + " WHERE OC.ID_ORDINE = "+id+"" 
                                + " AND OC.ATTIVO = 'S'"
                                + " AND OC.ID_ANAGRAFICA = A.ID";
                        res2 = conn.selectSMS(query);
                        jTableClienti.setVisible(false);
                        DefaultTableModel defaultModel = (DefaultTableModel) jTableClienti.getModel();

                        while (defaultModel.getRowCount() > 0) {
                            defaultModel.removeRow(0);
                        }      
                        
                        while (res2.next()) {
                            Object[] cell = {res2.getString("ID"),
                                res2.getString("RAGIONE_SOCIALE"),
                                res2.getString("PARTITA_IVA"),
                                res2.getString("INDIRIZZO_AZIENDA"),
                                res2.getString("CITTA_AZIENDA")
                            };
                            defaultModel.addRow(cell);
                        }                        
                        
                        jTableClienti.invalidate();
                        jTableClienti.validate();
                        jTableClienti.repaint();    
                        jTableClienti.setVisible(true);                        
                        rimuoviTuttiElementiListaArticoli();
                    }
                }else{
                    jLabelID.setText("-");
                    rimuoviTuttiElementiListaArticoli();
                    rimuoviTuttiElementiListaClienti();
                    rimuoviTuttiElementiListaPuntiVendita();

                }
            } catch (Exception e) {
                Utils.logError(e, "", true);
            }
            conn.close();
            parentFrame.waiting.dispose();
            parentFrame.waiting = null;
            validate();
            repaint();            
        }

        private void popolaListe(int id) {
            
        }


    }
    
    private void rimuoviClienteDaOrdine(String idCliente){
        String idOrdine = jLabelID.getText();
        if (idOrdine.equals("-")) {
            return;
        }
        
        //Thread t = new Thread(new erpgest.utils.ShowWaiting(parentFrame.getFrame(), null, "Salvataggio in corso. Attendere"));
        //t.start();

//        while (parentFrame.waiting == null) {
//            try {
//                Thread.sleep(100);
//            } catch (Exception e) {
//            }
//        }

        Thread tt = new Thread(new RimuoviCliente(idCliente));
        tt.start();        
        
        

    }
    
    private void rimuoviTuttiElementiListaClienti(){
        jTableClienti.setVisible(false);
        DefaultTableModel defaultModel = (DefaultTableModel) jTableClienti.getModel();

        while (defaultModel.getRowCount() > 0) {
            defaultModel.removeRow(0);
        }      
        jTableClienti.invalidate();
        jTableClienti.validate();
        jTableClienti.repaint();    
        jTableClienti.setVisible(true);  
        
    }
    
    private void rimuoviTuttiElementiListaArticoli(){
        jTableArticoli.setVisible(false);
        DefaultTableModel defaultModel = (DefaultTableModel) jTableArticoli.getModel();

        while (defaultModel.getRowCount() > 0) {
            defaultModel.removeRow(0);
        }      
        jTableArticoli.invalidate();
        jTableArticoli.validate();
        jTableArticoli.repaint();    
        jTableArticoli.setVisible(true);
    }
    private void rimuoviTuttiElementiListaPuntiVendita() {
        jTablePuntiVendita.setVisible(false);
        DefaultTableModel defaultModel = (DefaultTableModel) jTablePuntiVendita.getModel();

        while (defaultModel.getRowCount() > 0) {
            defaultModel.removeRow(0);
        }      
        jTablePuntiVendita.invalidate();
        jTablePuntiVendita.validate();
        jTablePuntiVendita.repaint();    
        jTablePuntiVendita.setVisible(true);  
    }    
}
